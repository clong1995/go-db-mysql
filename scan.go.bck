package db

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"reflect"
)

func scan[T any](rows *sql.Rows) (res []T, err error) {
	columns, err := rows.Columns()
	if err != nil {
		log.Println(err)
		return
	}

	var obj T
	objType := reflect.TypeOf(obj)

	if objType.Kind() == reflect.Struct {
		var fieldPointers []any
		var scanPointers []any
		var jsonPointers map[int]*[]byte

		if objType.NumField() != len(columns) {
			err = fmt.Errorf(`columns len = %d, objType len = %d`, len(columns), objType.NumField())
			log.Println(err)
			return
		}

		fieldPointers = make([]any, len(columns))
		jsonPointers = make(map[int]*[]byte)
		scanPointers = make([]any, len(columns))

		var field reflect.Value
		objValueElem := reflect.ValueOf(&obj).Elem()
		for i := range fieldPointers {
			field = objValueElem.Field(i)
			fieldPointers[i] = field.Addr().Interface()
			if field.Kind() == reflect.Struct || field.Kind() == reflect.Slice {
				var jsonData []byte
				jsonPointers[i] = &jsonData
				scanPointers[i] = jsonPointers[i]
			} else {
				scanPointers[i] = fieldPointers[i]
			}
		}
		for rows.Next() {
			if err = rows.Scan(scanPointers...); err != nil {
				log.Println(err)
				return
			}
			for k, v := range jsonPointers {
				if err = json.Unmarshal(*v, fieldPointers[k]); err != nil {
					log.Println(err)
					return
				}
			}
			res = append(res, obj)
		}
	} else {
		for rows.Next() {
			if err = rows.Scan(&obj); err != nil {
				log.Println(err)
				return
			}
			res = append(res, obj)
		}
	}

	if err = rows.Err(); err != nil {
		log.Println(err)
		return
	}

	return
}
